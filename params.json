{"name":"BubbleWrap","body":"# BubbleWrap for RubyMotion\r\n\r\nA collection of helpers and wrappers used to wrap CocoaTouch code and provide more Ruby like APIs.\r\n\r\n## Installation\r\n\r\n```ruby\r\ngem install bubble-wrap\r\n```\r\n\r\n## Setup\r\n\r\n1. Edit the Rakefile of your RubyMotion project and add the following require line.\r\n```ruby\r\nrequire 'bubble-wrap'\r\n```\r\nNote: **DON'T** use `app.files =` in your Rakefile to set up your files once you've required BubbleWrap.\r\nMake sure to append onto the array or use `+=`.\r\n\r\n2. Now, you can use BubbleWrap extension in your app:\r\n\r\n```ruby\r\nclass AppDelegate\r\n  def application(application, didFinishLaunchingWithOptions:launchOptions)\r\n    puts \"#{App.name} (#{documents_path})\"\r\n    true\r\n  end\r\nend\r\n```\r\n\r\nFor a more complete list of helper/wrapper descriptions and more details, see the [wiki](https://github.com/mattetti/BubbleWrap/wiki).\r\n\r\n## HTTP\r\n\r\n`BubbleWrap::HTTP` wraps `NSURLRequest`, `NSURLConnection` and friends to provide Ruby developers with a more familiar and easier to use API.\r\nThe API uses async calls and blocks to stay as simple as possible.\r\n\r\nUsage example:\r\n\r\n```ruby\r\nBubbleWrap::HTTP.get(\"https://api.github.com/users/mattetti\") do |response|\r\n  p response.body.to_str\r\nend\r\n```\r\n\r\n```ruby\r\nBubbleWrap::HTTP.get(\"https://api.github.com/users/mattetti\", {credentials: {username: 'matt', password: 'aimonetti'}}) do |response|\r\n  p response.body.to_str # prints the response's body\r\nend\r\n```\r\n\r\n```ruby\r\ndata = {first_name: 'Matt', last_name: 'Aimonetti'}\r\nBubbleWrap::HTTP.post(\"http://foo.bar.com/\", {payload: data}) do |response|\r\n  if response.ok?\r\n    json = BubbleWrap::JSON.parse(response.body.to_str)\r\n    p json['id']\r\n  elsif response.status_code.to_s =~ /40\\d/\r\n    alert(\"Login failed\") # helper provided by the kernel file in this repo.\r\n  else\r\n    alert(response.error_message)\r\n  end\r\nend\r\n```\r\n\r\n## JSON\r\n\r\n`BubbleWrap::JSON` wraps `NSJSONSerialization` available in iOS5 and offers the same API as Ruby's JSON std lib.\r\n\r\n## Kernel\r\n\r\nA collection of useful methods used often in my RubyMotion apps.\r\n\r\nExamples:\r\n```ruby\r\n> iphone?\r\n# true\r\n> ipad?\r\n# false\r\n> orientation\r\n# :portrait\r\n> simulator?\r\n# true\r\n> documents_path\r\n# \"/Users/mattetti/Library/Application Support/iPhone Simulator/5.0/Applications/EEC6454E-1816-451E-BB9A-EE18222E1A8F/Documents\"\r\n```\r\n\r\n## App\r\n\r\nA module allowing developers to store global states and also provides a\r\npersistence layer.\r\n\r\n## NSUserDefaults\r\n\r\nHelper methods added to the class repsonsible for user preferences.\r\n\r\n## NSIndexPath\r\n\r\nHelper methods added to give `NSIndexPath` a bit more of a Ruby\r\ninterface.\r\n\r\n## Gestures\r\n\r\nExtra methods on `UIView` for working with gesture recognizers. A gesture recognizer can be added using a normal Ruby block, like so:\r\n\r\n```ruby\r\n    view.whenTapped do\r\n      UIView.animateWithDuration(1,\r\n        animations:lambda {\r\n          # animate\r\n          # @view.transform = ...\r\n        })\r\n    end\r\n```\r\n\r\nThere are similar methods for pinched, rotated, swiped, panned, and pressed (for long presses). All of the methods return the actual recognizer object, so it is possible to set the delegate if more fine-grained control is needed.\r\n\r\n## UIButton\r\n\r\nHelper methods to give `UIButton` a Ruby-like interface. Ex:\r\n\r\n```ruby\r\nbutton.when(UIControlEventTouchUpInside) do\r\n  self.view.backgroundColor = UIColor.redColor\r\nend\r\n```\r\n\r\n## NSNotificationCenter\r\n\r\nHelper methods to give NSNotificationCenter a Ruby-like interface:\r\n\r\n```ruby\r\ndef viewWillAppear(animated)\r\n  @foreground_observer = notification_center.observe UIApplicationWillEnterForegroundNotification do |notification|\r\n    loadAndRefresh\r\n  end\r\n  \r\n  @reload_observer notification_center.observe ReloadNotification do |notification|\r\n    loadAndRefresh\r\n  end\r\nend\r\n\r\ndef viewWillDisappear(animated)\r\n  notification_center.unobserve @foreground_observer\r\n  notification_center.unobserve @reload_observer\r\nend\r\n\r\ndef reload\r\n  notification_center.post ReloadNotification\r\nend\r\n```","tagline":"Cocoa wrappers and helpers for RubyMotion (Ruby for iOS)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}